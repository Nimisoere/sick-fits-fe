{"version":3,"file":"static/webpack/static/development/pages/order.js.6fbcdf0bb57febf2cf6b.hot-update.js","sources":["webpack:///./components/Order.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport gql from 'graphql-tag';\nimport Head from 'next/head';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\n\nexport const SINGLE_ORDER_QUERY = gql`\n    query SINGLE_ORDER_QUERY($id: ID!){\n        order(id: $id){\n            id\n            charge\n            total\n            createdAt\n            user{\n                id\n            }\n            items {\n                id\n                title\n                description\n                price\n                image\n                quantity\n            }\n        }\n    }\n`;\n\nclass Order extends Component {\n    static propTypes = {\n        id: PropTypes.string\n    }\n    render() {\n        const { id } = this.props;\n        return (\n            <Query query={SINGLE_ORDER_QUERY} variables={{ id }}>\n                {({ data, error, loading }) => {\n                    if (error) return <Error error={error} />\n                    if (loading) return <p>Loading...</p>\n                    const {order} = data;\n                    return (\n                        <OrderStyles data-test=\"order\">\n                            <Head>\n                                <title>Sick Fits - Order {order.id}</title>\n                            </Head>\n                            <p>\n                                <span>Order ID:</span>\n                                <span>{id}</span>\n                            </p>\n                            <p>\n                                <span>Charge:</span>\n                                <span>{order.charge}</span>\n                            </p>\n                            <p>\n                                <span>Date:</span>\n                                <span>{format(order.createdAt, 'MMMM d, YYYY h:mm a')}</span>\n                            </p>\n                            <p>\n                                <span>Order Total:</span>\n                                <span>{formatMoney(order.total)}</span>\n                            </p>\n                            <p>\n                                <span>Item Count:</span>\n                                <span>{order.items.length}</span>\n                            </p>\n                            <div className=\"items\">\n                                {\n                                    order.items.map(item => (\n                                        <div key={item.id} className=\"order-item\">\n                                            <img src={item.image} alt={item.title}/>\n                                            <div className=\"item-details\">\n                                                <h2>{item.title}</h2>\n                                                <p>Qty: {item.quantity}</p>\n                                                <p>Each: {formatMoney(item.price)}</p>\n                                                <p>Subtotal: {formatMoney(item.price * item.quantity)}</p>\n                                                <p>{item.description}</p>\n                                            </div>\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                        </OrderStyles>\n                    )\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default Order\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAqBA;;;;;;;;;;;;;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAgBA;AAGA;;;;AA1DA;AACA;AADA;AAEA;AADA;AACA;AA2DA;;;;A","sourceRoot":""}